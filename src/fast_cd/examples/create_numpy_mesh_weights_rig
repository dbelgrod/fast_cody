import igl
import fast_cd_pyb as fcd
import numpy as np
import scipy as sp
import json
import os.path
import polyscope as ps

#Parameters
name = "charizard"
rig_names = ["single_bone", "skeleton_rig_legs", "skeleton_rig_arms_legs"]
data_dir = "./data/" + name + "/"
result_dir = "./data/charizard/"
rig_thickness = 0.1
mode_type = "skinning";
num_modes = 10;

mesh_file = data_dir + "/" + name + ".msh"
[V, F, T] = fcd.readMSH(mesh_file)
F = igl.boundary_facets(T)
[V, so, to] = fcd.scale_and_center_geometry(V, 1, np.array([[0, 0,  0.]]))


#ALSO  do a null one
rig_dir = result_dir +  "/null/"
try: 
    os.makedirs(rig_dir) 
except OSError as error: 
    print(error)
J = sp.sparse.csc_matrix((V.shape[0]*3, 0));
[B, Ws, L] = fcd.get_modes(V, T, np.array([[]]), J, mode_type, num_modes)
np.save(rig_dir + "V.npy", V)
np.save(rig_dir + "F.npy", F)
np.save(rig_dir + "Ws.npy", Ws)
np.save(rig_dir + "B.npy", B)
for rig_name in rig_names:
    rig_dir = result_dir + rig_name + "/"
    rig_path = rig_dir +  rig_name + ".json"
    f = open(rig_path)
    j = json.load(f)
    W = np.array(j["W"])
    Vs = np.array(j["V"])
    bl = np.array(j["lengths"])/so

   # P0 = np.array(j["p0"], order="F").reshape((W.shape[1]*4, 3))

    A = np.array(j["p0"]).transpose([0, 2, 1])
    P0 = A.reshape((W.shape[1]*4, 3))
    [W, P0] = fcd.fit_rig_to_mesh(W, P0, Vs, V, T);
    p0 = P0.flatten(order="F")

    [rigV, rigF, rigC] = fcd.get_skeleton_mesh(rig_thickness, p0, bl )


    J = fcd.lbs_jacobian(V, W);
    [B, Ws, L] = fcd.get_modes(V, T, W, J, mode_type, num_modes)

    np.save(rig_dir + "V.npy", V)
    np.save(rig_dir + "F.npy", F)
    np.save(rig_dir + "Ws.npy", Ws)
    np.save(rig_dir + "B.npy", B)

    np.save(rig_dir + "rigV.npy", rigV)
    np.save(rig_dir + "rigF.npy", rigF)
    np.save(rig_dir + "rigC.npy", rigC)

    # disable if you want to visualize rig, mesh, rn
    # ps.init()
    # ps.register_surface_mesh("mesh", V, F)
    # ps.register_surface_mesh("rig", rigV, rigF)
    # ps.show()

